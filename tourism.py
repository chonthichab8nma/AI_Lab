from PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QTextBrowser
from rdflib import Graph
from tkinter import messagebox

class OntologySearch:
    def __init__(self, ontology_file):
        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå RDF/OWL
        self.g = Graph()
        self.g.parse(ontology_file, format="xml")

    def search_info(self, keyword):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SPARQL query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô
        query = f"""
            PREFIX : <http://www.my_ontology.edu/mytourism#>
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

            SELECT ?subject ?property ?value WHERE {{
                ?subject ?property ?value .
                FILTER (
                    regex(str(?subject), "{keyword}", "i") || 
                    regex(str(?value), "{keyword}", "i") || 
                    regex(str(?property), "{keyword}", "i") ||
                    regex(str(?subject), "{keyword.lower()}", "i") || 
                    regex(str(?value), "{keyword.lower()}", "i") || 
                    regex(str(?property), "{keyword.lower()}", "i")
                )
                FILTER (?property IN (:hasFlower, :hasImageOfProvince, :hasLatitudeOfProvince, :hasLongitudeOfProvince, :hasMotto, :hasNameOfProvince, :hasSeal, :hasTraditionalNameOfProvince, :hasTree, :hasURLOfProvince))
            }}
        """

        results = self.g.query(query)
        data = {}

        for row in results:
            subject = str(row.subject).split("#")[-1]
            property_name = str(row.property).split("#")[-1]
            value = str(row.value)

             # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        if subject not in data:
            data[subject] = {}

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á property ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥
        if property_name not in data[subject]:
            data[subject][property_name] = []

        if value not in data[subject][property_name]:
            data[subject][property_name].append(value)
        return data
   


    def get_full_info(self, subject):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á SPARQL query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö
        query = f"""
            PREFIX : <http://www.my_ontology.edu/mytourism#>
            PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

            SELECT ?property ?value WHERE {{
                :{subject} ?property ?value .
                FILTER (?property IN (:hasFlower, :hasImageOfProvince, :hasLatitudeOfProvince, :hasLongitudeOfProvince, :hasMotto, :hasNameOfProvince, :hasSeal, :hasTraditionalNameOfProvince, :hasTree, :hasURLOfProvince))
            }}
        """

        results = self.g.query(query)
        full_data = []

        for row in results:
            property_name = str(row.property).split("#")[-1]
            value = str(row.value)
            full_data.append(f"üîπ {property_name}: {value}")

        return full_data

class ProvinceSearchApp(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")

        # ‡πÇ‡∏´‡∏•‡∏î Ontology
        try:
            self.ontology_search = OntologySearch("tourism.owl")  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ rdflib
        except FileNotFoundError:
            print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå tourism.owl")
            self.close()  # ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå
            return

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI
        self.create_widgets()

    def create_widgets(self):
        layout = QVBoxLayout()

        self.search_input = QLineEdit(self)
        self.search_input.setPlaceholderText("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        layout.addWidget(self.search_input)

        self.search_button = QPushButton("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", self)
        self.search_button.clicked.connect(self.search)
        layout.addWidget(self.search_button)

        #self.clear_button = QPushButton("‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", self)
        #self.clear_button.clicked.connect(self.clear_results)
        #layout.addWidget(self.clear_button)

        self.result_box = QTextBrowser(self)
        layout.addWidget(self.result_box)

        self.setLayout(layout)

    def search(self):
        province_name = self.search_input.text()
        self.result_box.clear()  # ‡∏•‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Å‡πà‡∏≤

        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Ontology
        data = self.ontology_search.search_info(province_name)

        if data:
            for subject, properties in data.items():
                self.result_box.append(f"üìç {subject}:\n")
                for property in properties:
                    self.result_box.append(f"  {property}\n")

                full_info = self.ontology_search.get_full_info(subject)
                if full_info:
                    self.result_box.append("\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:\n")
                    self.result_box.append("\n".join(full_info))
                self.result_box.append("\n")
        else:
            self.result_box.append("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î")

    def clear_results(self):
        self.result_box.clear()

if __name__ == "__main__":
    app = QApplication([])
    window = ProvinceSearchApp()
    window.show()
    app.exec()
